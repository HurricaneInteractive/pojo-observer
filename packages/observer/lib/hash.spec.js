"use strict";

var _hash = _interopRequireDefault(require("./hash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('hash', () => {
  class Foo {
    constructor(x, y) {
      this.x = void 0;
      this.y = void 0;
      this.x = x;
      this.y = y;
    }

  }

  class Bar {
    constructor(x, y) {
      this.x = void 0;
      this.y = void 0;
      this.x = x;
      this.y = y;
    }

  }

  it('should provide the same hash when the model values are the same', () => {
    const foo = new Foo(1, 2);
    const hash1 = (0, _hash.default)(foo);
    const hash2 = (0, _hash.default)(foo);
    expect(hash1).toEqual(hash2);
  });
  it('should provide a different hash when model values change', () => {
    const foo = new Foo(1, 2);
    const hash1 = (0, _hash.default)(foo);
    foo.x = 5;
    const hash2 = (0, _hash.default)(foo);
    expect(hash1).not.toEqual(hash2);
  });
  it('should return a the same hash for different instances of the same class with the same values', () => {
    const foo1 = new Foo(1, 2);
    const foo2 = new Foo(1, 2);
    expect((0, _hash.default)(foo1)).toEqual((0, _hash.default)(foo2));
  });
  it('should return a different hash for different classes with the same values', function () {
    const foo = new Foo(1, 2);
    const bar = new Bar(1, 2);
    expect((0, _hash.default)(foo)).not.toEqual((0, _hash.default)(bar));
  });
  it('should return the same hash for different anonymous objects with the same values', () => {
    const foo = {
      x: 1,
      y: 2
    };
    const bar = {
      x: 1,
      y: 2
    };
    const hash1 = (0, _hash.default)(foo);
    const hash2 = (0, _hash.default)(bar);
    expect(hash1).toEqual(hash2);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oYXNoLnNwZWMudHMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJGb28iLCJjb25zdHJ1Y3RvciIsIngiLCJ5IiwiQmFyIiwiaXQiLCJmb28iLCJoYXNoMSIsImhhc2gyIiwiZXhwZWN0IiwidG9FcXVhbCIsIm5vdCIsImZvbzEiLCJmb28yIiwiYmFyIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBRUFBLFFBQVEsQ0FBQyxNQUFELEVBQVMsTUFBTTtBQUNyQixRQUFNQyxHQUFOLENBQVU7QUFJUkMsSUFBQUEsV0FBVyxDQUFDQyxDQUFELEVBQUlDLENBQUosRUFBTztBQUFBLFdBSFhELENBR1c7QUFBQSxXQUZYQyxDQUVXO0FBQ2hCLFdBQUtELENBQUwsR0FBU0EsQ0FBVDtBQUNBLFdBQUtDLENBQUwsR0FBU0EsQ0FBVDtBQUNEOztBQVBPOztBQVVWLFFBQU1DLEdBQU4sQ0FBVTtBQUlSSCxJQUFBQSxXQUFXLENBQUNDLENBQUQsRUFBSUMsQ0FBSixFQUFPO0FBQUEsV0FIWEQsQ0FHVztBQUFBLFdBRlhDLENBRVc7QUFDaEIsV0FBS0QsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsV0FBS0MsQ0FBTCxHQUFTQSxDQUFUO0FBQ0Q7O0FBUE87O0FBVVZFLEVBQUFBLEVBQUUsQ0FBQyxpRUFBRCxFQUFvRSxNQUFNO0FBQzFFLFVBQU1DLEdBQUcsR0FBRyxJQUFJTixHQUFKLENBQVEsQ0FBUixFQUFXLENBQVgsQ0FBWjtBQUVBLFVBQU1PLEtBQUssR0FBRyxtQkFBS0QsR0FBTCxDQUFkO0FBQ0EsVUFBTUUsS0FBSyxHQUFHLG1CQUFLRixHQUFMLENBQWQ7QUFFQUcsSUFBQUEsTUFBTSxDQUFDRixLQUFELENBQU4sQ0FBY0csT0FBZCxDQUFzQkYsS0FBdEI7QUFDRCxHQVBDLENBQUY7QUFRQUgsRUFBQUEsRUFBRSxDQUFDLDBEQUFELEVBQTZELE1BQU07QUFDbkUsVUFBTUMsR0FBRyxHQUFHLElBQUlOLEdBQUosQ0FBUSxDQUFSLEVBQVcsQ0FBWCxDQUFaO0FBRUEsVUFBTU8sS0FBSyxHQUFHLG1CQUFLRCxHQUFMLENBQWQ7QUFFQUEsSUFBQUEsR0FBRyxDQUFDSixDQUFKLEdBQVEsQ0FBUjtBQUNBLFVBQU1NLEtBQUssR0FBRyxtQkFBS0YsR0FBTCxDQUFkO0FBRUFHLElBQUFBLE1BQU0sQ0FBQ0YsS0FBRCxDQUFOLENBQWNJLEdBQWQsQ0FBa0JELE9BQWxCLENBQTBCRixLQUExQjtBQUNELEdBVEMsQ0FBRjtBQVVBSCxFQUFBQSxFQUFFLENBQUMsOEZBQUQsRUFBaUcsTUFBTTtBQUN2RyxVQUFNTyxJQUFJLEdBQUcsSUFBSVosR0FBSixDQUFRLENBQVIsRUFBVyxDQUFYLENBQWI7QUFDQSxVQUFNYSxJQUFJLEdBQUcsSUFBSWIsR0FBSixDQUFRLENBQVIsRUFBVyxDQUFYLENBQWI7QUFFQVMsSUFBQUEsTUFBTSxDQUFDLG1CQUFLRyxJQUFMLENBQUQsQ0FBTixDQUFtQkYsT0FBbkIsQ0FBMkIsbUJBQUtHLElBQUwsQ0FBM0I7QUFDRCxHQUxDLENBQUY7QUFNQVIsRUFBQUEsRUFBRSxDQUFDLDJFQUFELEVBQThFLFlBQVc7QUFDekYsVUFBTUMsR0FBRyxHQUFHLElBQUlOLEdBQUosQ0FBUSxDQUFSLEVBQVcsQ0FBWCxDQUFaO0FBQ0EsVUFBTWMsR0FBRyxHQUFHLElBQUlWLEdBQUosQ0FBUSxDQUFSLEVBQVcsQ0FBWCxDQUFaO0FBRUFLLElBQUFBLE1BQU0sQ0FBQyxtQkFBS0gsR0FBTCxDQUFELENBQU4sQ0FBa0JLLEdBQWxCLENBQXNCRCxPQUF0QixDQUE4QixtQkFBS0ksR0FBTCxDQUE5QjtBQUNELEdBTEMsQ0FBRjtBQU1BVCxFQUFBQSxFQUFFLENBQUMsa0ZBQUQsRUFBcUYsTUFBTTtBQUMzRixVQUFNQyxHQUFHLEdBQUc7QUFBQ0osTUFBQUEsQ0FBQyxFQUFFLENBQUo7QUFBT0MsTUFBQUEsQ0FBQyxFQUFFO0FBQVYsS0FBWjtBQUNBLFVBQU1XLEdBQUcsR0FBRztBQUFDWixNQUFBQSxDQUFDLEVBQUUsQ0FBSjtBQUFPQyxNQUFBQSxDQUFDLEVBQUU7QUFBVixLQUFaO0FBRUEsVUFBTUksS0FBSyxHQUFHLG1CQUFLRCxHQUFMLENBQWQ7QUFDQSxVQUFNRSxLQUFLLEdBQUcsbUJBQUtNLEdBQUwsQ0FBZDtBQUVBTCxJQUFBQSxNQUFNLENBQUNGLEtBQUQsQ0FBTixDQUFjRyxPQUFkLENBQXNCRixLQUF0QjtBQUNELEdBUkMsQ0FBRjtBQVNELENBNURPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaGFzaCBmcm9tICcuL2hhc2gnXG5cbmRlc2NyaWJlKCdoYXNoJywgKCkgPT4ge1xuICBjbGFzcyBGb28ge1xuICAgIHB1YmxpYyB4OiBhbnlcbiAgICBwdWJsaWMgeTogYW55XG5cbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgICB0aGlzLnggPSB4XG4gICAgICB0aGlzLnkgPSB5XG4gICAgfVxuICB9XG5cbiAgY2xhc3MgQmFyIHtcbiAgICBwdWJsaWMgeDogYW55XG4gICAgcHVibGljIHk6IGFueVxuXG4gICAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgICAgdGhpcy54ID0geFxuICAgICAgdGhpcy55ID0geVxuICAgIH1cbiAgfVxuXG4gIGl0KCdzaG91bGQgcHJvdmlkZSB0aGUgc2FtZSBoYXNoIHdoZW4gdGhlIG1vZGVsIHZhbHVlcyBhcmUgdGhlIHNhbWUnLCAoKSA9PiB7XG4gICAgY29uc3QgZm9vID0gbmV3IEZvbygxLCAyKVxuXG4gICAgY29uc3QgaGFzaDEgPSBoYXNoKGZvbylcbiAgICBjb25zdCBoYXNoMiA9IGhhc2goZm9vKVxuXG4gICAgZXhwZWN0KGhhc2gxKS50b0VxdWFsKGhhc2gyKVxuICB9KVxuICBpdCgnc2hvdWxkIHByb3ZpZGUgYSBkaWZmZXJlbnQgaGFzaCB3aGVuIG1vZGVsIHZhbHVlcyBjaGFuZ2UnLCAoKSA9PiB7XG4gICAgY29uc3QgZm9vID0gbmV3IEZvbygxLCAyKVxuXG4gICAgY29uc3QgaGFzaDEgPSBoYXNoKGZvbylcblxuICAgIGZvby54ID0gNVxuICAgIGNvbnN0IGhhc2gyID0gaGFzaChmb28pXG5cbiAgICBleHBlY3QoaGFzaDEpLm5vdC50b0VxdWFsKGhhc2gyKVxuICB9KVxuICBpdCgnc2hvdWxkIHJldHVybiBhIHRoZSBzYW1lIGhhc2ggZm9yIGRpZmZlcmVudCBpbnN0YW5jZXMgb2YgdGhlIHNhbWUgY2xhc3Mgd2l0aCB0aGUgc2FtZSB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgZm9vMSA9IG5ldyBGb28oMSwgMilcbiAgICBjb25zdCBmb28yID0gbmV3IEZvbygxLCAyKVxuXG4gICAgZXhwZWN0KGhhc2goZm9vMSkpLnRvRXF1YWwoaGFzaChmb28yKSlcbiAgfSlcbiAgaXQoJ3Nob3VsZCByZXR1cm4gYSBkaWZmZXJlbnQgaGFzaCBmb3IgZGlmZmVyZW50IGNsYXNzZXMgd2l0aCB0aGUgc2FtZSB2YWx1ZXMnLCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBmb28gPSBuZXcgRm9vKDEsIDIpXG4gICAgY29uc3QgYmFyID0gbmV3IEJhcigxLCAyKVxuXG4gICAgZXhwZWN0KGhhc2goZm9vKSkubm90LnRvRXF1YWwoaGFzaChiYXIpKVxuICB9KVxuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgc2FtZSBoYXNoIGZvciBkaWZmZXJlbnQgYW5vbnltb3VzIG9iamVjdHMgd2l0aCB0aGUgc2FtZSB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgZm9vID0ge3g6IDEsIHk6IDJ9XG4gICAgY29uc3QgYmFyID0ge3g6IDEsIHk6IDJ9XG5cbiAgICBjb25zdCBoYXNoMSA9IGhhc2goZm9vKVxuICAgIGNvbnN0IGhhc2gyID0gaGFzaChiYXIpXG5cbiAgICBleHBlY3QoaGFzaDEpLnRvRXF1YWwoaGFzaDIpXG4gIH0pXG59KVxuIl19