"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUniqueId = useUniqueId;
exports.pureObserver = pureObserver;
exports.default = void 0;

var _react = require("react");

var _hash = _interopRequireDefault(require("./hash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class EventEmitter {
  constructor() {
    this.callbacks = {};
  }

  on(eventId, subscriptionId, cb) {
    this.callbacks[eventId] = this.callbacks[eventId] || [];
    cb.subscriptionId = subscriptionId;
    this.callbacks[eventId].push(cb);
  }

  remove(eventId, subscriptionId) {
    this.callbacks[eventId] = this.callbacks[eventId].filter(c => c.subscriptionId !== subscriptionId);
  }

  emit(eventId) {
    this.callbacks[eventId] && this.callbacks[eventId].forEach(cb => cb());
  }

}

const eventEmitter = new EventEmitter();

const id = () => 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, () => ((Math.floor(new Date().getTime() / 16) + Math.random() * 16) % 16 | 0 & 0x3 | 0x8).toString(16));

function getFieldNames(toCheck) {
  let props = [];
  let obj = toCheck;

  do {
    props = props.concat(Object.getOwnPropertyNames(obj));
  } while (obj = Object.getPrototypeOf(obj));

  return props.sort().filter((e, i, arr) => e != arr[i + 1] && typeof toCheck[e] !== 'function');
}

function isWritableField(object, fieldName) {
  const fieldDescriptor = Object.getOwnPropertyDescriptor(object, fieldName);
  return fieldDescriptor && fieldDescriptor.writable;
}

function isWriteableObjectField(object, fieldName) {
  return isWritableField(object, fieldName) && typeof object[fieldName] === 'object' && object[fieldName] !== null;
}

function isWriteablePrimitiveField(object, fieldName) {
  return isWritableField(object, fieldName) && (typeof object[fieldName] !== 'object' || object[fieldName] === null);
}

function isWriteableArray(object, fieldName) {
  return isWritableField(object, fieldName) && Array.isArray(object[fieldName]);
}

function attachProxyToProperties(model, callback, id) {
  if (!model.__proxyAttached) {
    model.__proxyAttached = true;
    getFieldNames(model).forEach(field => {
      // eslint-disable-next-line @typescript-eslint/no-use-before-define
      recursivelyAttachProxy(model[field], field, model, id ? id : model.__observableId, callback);
    });
  }
}

function attachProxyToField(object, fieldName, originalField, callback, id) {
  Object.defineProperty(object, fieldName, {
    configurable: true,
    enumerable: true,
    get: () => originalField,
    set: value => {
      if (typeof value === 'object') {
        attachProxyToProperties(value, callback, id);
      }

      originalField = value;
      callback();
    }
  });
}

function attachProxyToArray(object, fieldName, callback, id) {
  object[fieldName].forEach((element, index) => {
    recursivelyAttachProxy(element, index, object[fieldName], id, callback);
  });
  object[fieldName] = new Proxy(object[fieldName], {
    get: function (target, property) {
      return target[property];
    },
    set: function (target, property, value) {
      if (property !== '__proto__' && property !== 'length') {
        if (typeof value === 'object') {
          attachProxyToProperties(value, callback, id);
        }

        target[property] = value;
        callback();
      }

      return true;
    }
  });
}

function recursivelyAttachProxy(originalField, fieldName, object, id, callback) {
  if (isWriteablePrimitiveField(object, fieldName)) return attachProxyToField(object, fieldName, originalField, callback, id);
  if (isWriteableArray(object, fieldName)) return attachProxyToArray(object, fieldName, callback, id);

  if (isWriteableObjectField(object, fieldName)) {
    attachProxyToField(object, fieldName, originalField, callback, id);
    getFieldNames(object[fieldName]).forEach(nestedFieldName => recursivelyAttachProxy(object[fieldName][nestedFieldName], nestedFieldName, object[fieldName], id, callback));
    return;
  }
}

function addId(model) {
  if (!model.__observableId) Object.defineProperty(model, '__observableId', {
    value: id(),
    writable: false
  });
}

function addHash(model) {
  if (!model.hash) model.hash = () => (0, _hash.default)(model);
}

let currentId = 0;

function useUniqueId() {
  const ref = (0, _react.useRef)(0);

  if (ref.current === 0) {
    ref.current = ++currentId;
  }

  return 'subscription_id' + ref.current;
}

function reactify(model) {
  const subscriptionId = useUniqueId();
  const [, stateChange] = (0, _react.useState)(model.hash());
  const stateChangeCallback = (0, _react.useCallback)(() => {
    stateChange(model.hash());
  }, [model.__observableId]);
  (0, _react.useEffect)(() => {
    eventEmitter.on(model.__observableId, subscriptionId, stateChangeCallback);
    return () => eventEmitter.remove(model.__observableId, subscriptionId);
  }, [model.__observableId, subscriptionId]);
  return () => eventEmitter.emit(model.__observableId);
}

function decorate(model) {
  addHash(model);
  addId(model);
}

function useObserver(model) {
  decorate(model);
  const callback = reactify(model);
  attachProxyToProperties(model, callback);
  return model;
}

function pureObserver(model, callback) {
  decorate(model);
  attachProxyToProperties(model, callback);
  return model;
}

var _default = useObserver;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,